---
import BaseLayout from "@/layouts/base-layout.astro";
import { getCollection } from "astro:content";
import config from "@/config.json";
import { formatDisplayedFullDate } from "@/utils/date";
import AsideTags from "@/components/aside-tags.astro";
import AsidePosts from "@/components/aside-posts.astro";
import Chip from "@/components/chip.astro";
import { Icon } from "astro-icon/components";
import GoBackButton from "@/components/go-back-button.astro";

if (!config?.blog?.enabled) {
    return Astro.rewrite("/404");
}

export async function getStaticPaths() {
    const blogEntries = await getCollection("posts", (p) => !p.data.draft);
    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}
const { entry: post } = Astro.props;
const { Content } = await post.render();
---

<BaseLayout
    title={post.data.title}
    class="grid gap-y-16 sm:grid-cols-[3fr_1fr] sm:gap-x-8"
>
    <article class="overflow-hidden">
        <section class="mb-6">
            <div class="flex flex-wrap justify-between">
                <h2>{post.data.title}</h2>
                <GoBackButton to="/blog" />
            </div>
            <div class="flex flex-wrap items-center gap-1 text-xs">
                <time
                    class="font-light"
                    datetime={post.data.published.toISOString()}
                >
                    {formatDisplayedFullDate(post.data.published)}
                </time>

                <Icon name="tags" class="text-lg ml-2" />
                {
                    post.data.tags.map((t) => (
                        <a href={`/tags/${t}`}>
                            <Chip>{t}</Chip>
                        </a>
                    ))
                }
            </div>
        </section>
        <Content />
    </article>
    <aside>
        <AsidePosts />
        <AsideTags />
    </aside>
</BaseLayout>

<script>
    let copyButtonLabel =
        '<svg xmlns=http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"/></svg>';
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
        let wrapper = document.createElement("div");
        wrapper.style.position = "relative";

        let copyButton = document.createElement("button");
        copyButton.className = "copy-code";
        copyButton.innerHTML = copyButtonLabel;

        codeBlock.setAttribute("tabindex", "0");
        codeBlock.appendChild(copyButton);

        const copiedText = document.createElement("div");
        copiedText.className = "copy-code-text";
        copiedText.innerText = "Copied";
        copiedText.style.display = "none";
        codeBlock.appendChild(copiedText);

        // wrap codebock with relative parent element
        codeBlock.parentNode.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener("click", async () => {
            await copyCode(codeBlock, copiedText);
        });
    }

    async function copyCode(block, text2) {
        let code = block.querySelector("code");
        let text = code.innerText;

        await navigator.clipboard.writeText(text);

        // visual feedback that task is completed
        text2.style.display = "block";

        setTimeout(() => {
            text2.style.display = "none";
        }, 700);
    }
</script>
