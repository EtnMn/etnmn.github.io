---
import "@/styles/code.css";
import { getCollection } from "astro:content";
import { formatDisplayedFullDate } from "@/utils/date";
import Chip from "@/components/chip.astro";
import { Icon } from "astro-icon/components";
import Prose from "@/components/prose.astro";
import BlogLayout from "@/layouts/blog-layout.astro";
import BlogTitle from "@/components/blog-title.astro";

export async function getStaticPaths() {
    const blogEntries = await getCollection("posts", (p) => !p.data.draft);
    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}
const { entry: post } = Astro.props;
const { Content } = await post.render();
---

<BlogLayout title={post.data.title}>
    <article>
        <BlogTitle>
            {post.data.title}
            <div slot="tag-line" class="flex flex-wrap items-center gap-2 text-xs font-light">
                <Icon name="calendar" class="text-lg" />
                <time
                    datetime={post.data.published.toISOString()}
                >
                    {formatDisplayedFullDate(post.data.published)}
                </time>

                { post.data.source && (
                <Icon name="github" class="text-lg" />
                        <a
                            href={post.data.source}
                            class="underline-offset-4 decoration-dashed decoration-1 hover:underline"
                        >
                            sources
                        </a>
                    )
                }

                <Icon name="tags" class="text-lg" />
                <div class="flex gap-2">
                {
                    post.data.tags.map((t) => (
                        <a href={`/blog/tags/${t}`}>
                            <Chip>{t}</Chip>
                        </a>
                    ))
                }
                </div>
            </div>
        </BlogTitle>
        <Prose>
            <Content />
        </Prose>
    </article>
</BlogLayout>

<script>
    const copyButtonLabel =
        '<svg xmlns=http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"/></svg>';

    for (const pre of Array.from(document.querySelectorAll("pre"))) {
        let wrapper = document.createElement("div");
        wrapper.style.position = "relative";

        let copyButton = document.createElement("button");
        copyButton.className = "copy-code";
        copyButton.innerHTML = copyButtonLabel;

        pre.setAttribute("tabindex", "0");
        pre.appendChild(copyButton);

        const notification = document.createElement("div");
        notification.className = "copy-code-notification";
        notification.innerText = "Copied";
        notification.style.display = "none";
        pre.appendChild(notification);

        if (pre.parentNode) {
            pre.parentNode.insertBefore(wrapper, pre);
        }
        wrapper.appendChild(pre);

        copyButton.addEventListener("click", async () => {
            await copyCode(pre, notification);
        });
    }

    async function copyCode(
        block: HTMLPreElement,
        notification: HTMLDivElement
    ) {
        const code = block.querySelector("code");
        if (code) {
            await navigator.clipboard.writeText(code.innerText);
            notification.style.display = "block";

            setTimeout(() => {
                notification.style.display = "none";
            }, 1000);
        }
    }
</script>

<style is:global>
    .prose img {
        margin: 12px auto;
    }

    .prose img:has(+ em) {
        margin-bottom: 3px;
    }

    .prose img + em {
        display: block;
        text-align: center;
        margin-bottom: 12px;
    }
</style>
